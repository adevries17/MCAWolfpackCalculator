<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAWQAAAK0AAACtAAAArQAAAK0AAACtAAAArQAAAK0AAACtAAAArQAA
        AK0AAACtAAAArQAAAK0AAACtAAAArQAAAK0AAACtAAAArQAAAK0AAACtAAAArQAAAK0AAACtAAAArQAA
        AK0AAACtAAAArQAAAK0AAACaAAAAAAAAAAAAAACqAAAA3AAAAKAAAACgAAAAoAAAAKAAAACgAAAAoAAA
        AKAAAACgAAAAoAAAAKAAAACgAAAAoAAAAKAAAACgAAAAoAAAAKAAAACgAAAAoAAAAKAAAACgAAAAoAAA
        AKAAAACgAAAAoAAAAKAAAACgAAAAuAAAAP8AAAAAAAAAAAAAAJwAAADYAAAAkAAAAJAAAACQAAAAkAAA
        AJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACQAAAAkAAA
        AJAAAACQAAAAkAAAAJAAAACQAAAAkAAAAJAAAACtAAAA+AAAAAAAAAAAAAAAJAAAAKwAAAC/AAAAvwAA
        AL8AAAC/AAAAvwAAAL8AAAC/AAAAvwAAAL8AAADDAAAAvwAAAL8AAADUAAAA+wAAAMEAAAC/AAAAvwAA
        AMMAAAD9AAAA9QAAAO0AAAC/AAAAvwAAAMIAAADAAAAAvwAAALwAAABeAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEQAAANkAAAAjAAAAAAAAAFQAAADvAAAABwAA
        AAAAAAAAAAAAEQAAAPkAAADWAAAAtQAAAAEAAAABAAAAsQAAAFoAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEgAA
        AOIAAACfAAAABwAAAA8AAAAAAAAAEAAAAAMAAAAEAAAADwAAAAAAAAAQAAAABAAAAAwAAADGAAAAwAAA
        AAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAARAAAAPUAAACRAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATAAAAtQAA
        AOYAAAAkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAATgAAAO0AAADKAAAATQAAAAkAAAABAAAAAAAAAAEAAAAPAAAAYgAA
        AN4AAADcAAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJQAAAKoAAAD4AAAA6QAAAL8AAACxAAAAxgAA
        APAAAADyAAAAkgAAABQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAACEAAABkAAAAjgAA
        AJsAAACJAAAAWQAAABYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/////8AAAADAAAAAwAAAAMAAAAD/8RgHwAAYAMAAAADP/wD8z/8A/IAA
        AAAAAAAAAAAAABHAAAMBgAABAAcAAQAf44MAAOH/AADx//iA+P/4gAD/+IAA//iAAP/4gAD/+IAB//wA
        Ef/8EIH//h/D//8CB///gA///8A///////8=
</value>
  </data>
</root>